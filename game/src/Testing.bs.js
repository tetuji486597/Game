// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function stringOfList(lis) {
  if (!lis) {
    return "";
  }
  var tl = lis.tl;
  var a = lis.hd;
  if (tl) {
    return String(a) + (", " + stringOfList(tl));
  } else {
    return String(a);
  }
}

function stringOfStateHelper(mat) {
  if (!mat) {
    return Pervasives.failwith("empty state");
  }
  var tl = mat.tl;
  var a = mat.hd;
  if (tl) {
    return "[" + (stringOfList(a) + ("],\n" + stringOfStateHelper(tl)));
  } else {
    return "[" + (stringOfList(a) + "]");
  }
}

function transpose(mat) {
  if (!mat) {
    return Pervasives.failwith("A matrix cannot be 0 - dimensional .");
  }
  var match = mat.hd;
  if (!match) {
    return Pervasives.failwith("A matrix cannot be 0 - dimensional .");
  }
  if (!match.tl) {
    return {
            hd: List.map(List.hd, mat),
            tl: /* [] */0
          };
  }
  var firstCol = List.map(List.hd, mat);
  var restMatrix = List.map(List.tl, mat);
  return {
          hd: firstCol,
          tl: transpose(restMatrix)
        };
}

function vertFlip(matrix) {
  return List.map(List.rev, matrix);
}

var getBoardWidth = List.length;

function addPaddingToRow(_c, _n) {
  while(true) {
    var n = _n;
    var c = _c;
    if (n === 0) {
      return c;
    }
    _n = n - 1 | 0;
    _c = {
      hd: 0,
      tl: c
    };
    continue ;
  };
}

function addPaddingToBoard(b, nd, nc) {
  if (b) {
    return {
            hd: Pervasives.$at(addPaddingToRow(b.hd, nd), List.init(nc - nd | 0, (function (param) {
                        return 0;
                      }))),
            tl: addPaddingToBoard(b.tl, nd - 1 | 0, nc)
          };
  } else {
    return /* [] */0;
  }
}

function checkFourInARow(_c) {
  while(true) {
    var c = _c;
    if (!c) {
      return false;
    }
    var match = c.tl;
    if (!match) {
      return false;
    }
    var match$1 = match.tl;
    var t2 = match.hd;
    if (!match$1) {
      return false;
    }
    var match$2 = match$1.tl;
    var t3 = match$1.hd;
    if (!match$2) {
      return false;
    }
    var t4 = match$2.hd;
    if (c.hd === t2 && t2 === t3 && t3 === t4 && t4 !== 0) {
      return true;
    }
    _c = {
      hd: t2,
      tl: {
        hd: t3,
        tl: {
          hd: t4,
          tl: match$2.tl
        }
      }
    };
    continue ;
  };
}

function checkVerticalWin(_b) {
  while(true) {
    var b = _b;
    if (!b) {
      return false;
    }
    var hd = b.hd;
    if (Pervasives.print_string(stringOfList(hd) + "\n"), checkFourInARow(hd)) {
      return true;
    }
    _b = b.tl;
    continue ;
  };
}

function checkHorizontalWin(b) {
  return checkVerticalWin(transpose(b));
}

function allDiagonals(mat) {
  return Pervasives.$at(transpose(addPaddingToBoard(mat, List.length(mat), List.length(mat))), transpose(addPaddingToBoard(List.map(List.rev, mat), List.length(List.map(List.rev, mat)), List.length(List.map(List.rev, mat)))));
}

function checkDiagonalWin(b) {
  return checkVerticalWin(allDiagonals(b));
}

function addValueToThreeInARow(_c, p) {
  while(true) {
    var c = _c;
    if (!c) {
      return 0;
    }
    var t1 = c.hd;
    var exit = 0;
    if (t1 !== 0) {
      exit = 1;
    } else {
      var match = c.tl;
      if (match) {
        var match$1 = match.tl;
        if (match$1) {
          var match$2 = match$1.tl;
          if (match$2) {
            var t3 = match$2.hd;
            var t2 = match$1.hd;
            var t1$1 = match.hd;
            if (t1$1 === t2 && t2 === t3 && t3 === (
                p === /* P1 */0 ? 1 : 2
              ) && t3 !== 0) {
              return 100 + addValueToThreeInARow({
                          hd: t1$1,
                          tl: {
                            hd: t2,
                            tl: {
                              hd: t3,
                              tl: match$2.tl
                            }
                          }
                        }, p);
            }
            exit = 1;
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    }
    if (exit === 1) {
      var match$3 = c.tl;
      if (!match$3) {
        return 0;
      }
      var match$4 = match$3.tl;
      if (!match$4) {
        return 0;
      }
      var bot = match$4.tl;
      var t3$1 = match$4.hd;
      var t2$1 = match$3.hd;
      var exit$1 = 0;
      if (bot && bot.hd === 0) {
        if (t1 === t2$1 && t2$1 === t3$1 && t3$1 === (
            p === /* P1 */0 ? 1 : 2
          ) && t3$1 !== 0) {
          return 100 + addValueToThreeInARow({
                      hd: t2$1,
                      tl: {
                        hd: t3$1,
                        tl: bot.tl
                      }
                    }, p);
        }
        exit$1 = 2;
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        _c = {
          hd: t2$1,
          tl: {
            hd: t3$1,
            tl: bot
          }
        };
        continue ;
      }
      
    }
    
  };
}

function addValueToTwoInARow(_c, p) {
  while(true) {
    var c = _c;
    if (!c) {
      return 0;
    }
    var t1 = c.hd;
    var exit = 0;
    if (t1 !== 0) {
      exit = 1;
    } else {
      var match = c.tl;
      if (match) {
        var match$1 = match.tl;
        if (match$1) {
          var t2 = match$1.hd;
          var t1$1 = match.hd;
          if (t1$1 === t2 && t2 === (
              p === /* P1 */0 ? 1 : 2
            ) && t2 !== 0) {
            return 10 + addValueToTwoInARow({
                        hd: t1$1,
                        tl: {
                          hd: t2,
                          tl: match$1.tl
                        }
                      }, p);
          }
          exit = 1;
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    }
    if (exit === 1) {
      var match$2 = c.tl;
      if (!match$2) {
        return 0;
      }
      var bot = match$2.tl;
      var t2$1 = match$2.hd;
      var exit$1 = 0;
      if (bot && bot.hd === 0) {
        if (t1 === t2$1 && t2$1 === (
            p === /* P1 */0 ? 1 : 2
          ) && t2$1 !== 0) {
          return 10 + addValueToTwoInARow({
                      hd: t2$1,
                      tl: bot.tl
                    }, p);
        }
        exit$1 = 2;
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        _c = {
          hd: t2$1,
          tl: bot
        };
        continue ;
      }
      
    }
    
  };
}

function countPlayerTilesInColumn(c, p) {
  if (c) {
    return (
            c.hd === (
              p === /* P1 */0 ? 1 : 2
            ) ? 1 : 0
          ) + countPlayerTilesInColumn(c.tl, p) | 0;
  } else {
    return 0;
  }
}

function addValueToGradient(b, i, center, p) {
  if (!b) {
    return 0;
  }
  var diff = Math.abs(i - center);
  var value = 1 / (diff + 1);
  return value * countPlayerTilesInColumn(b.hd, p) + addValueToGradient(b.tl, i + 1 | 0, center, p);
}

function accumulateValuesOneWay(b, p) {
  if (!b) {
    return 0;
  }
  var hd = b.hd;
  return addValueToThreeInARow(hd, p) + addValueToTwoInARow(hd, p) + accumulateValuesOneWay(b.tl, p);
}

function checkWin(board) {
  if (checkVerticalWin(board) || checkVerticalWin(transpose(board))) {
    return true;
  } else {
    return checkVerticalWin(allDiagonals(board));
  }
}

function accumulateValues(b, p) {
  if (checkWin(b)) {
    return Pervasives.infinity;
  } else {
    return accumulateValuesOneWay(b, p) + accumulateValuesOneWay(transpose(b), p) + 1.2 * accumulateValuesOneWay(allDiagonals(b), p) + addValueToGradient(b, 0, List.length(b) / 2 | 0, p);
  }
}

var exampleBoard = {
  hd: {
    hd: 0,
    tl: {
      hd: 0,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      }
    }
  },
  tl: {
    hd: {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      }
    },
    tl: {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

var exampleBoard2 = {
  hd: {
    hd: 0,
    tl: {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      }
    }
  },
  tl: {
    hd: {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      }
    },
    tl: {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

var exampleBoard3 = {
  hd: {
    hd: 0,
    tl: {
      hd: 0,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      }
    }
  },
  tl: {
    hd: {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      }
    },
    tl: {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

var exampleBoard4 = {
  hd: {
    hd: 0,
    tl: {
      hd: 0,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      }
    }
  },
  tl: {
    hd: {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 1,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      }
    },
    tl: {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 2,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 1,
                      tl: {
                        hd: 1,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 2,
                      tl: {
                        hd: 2,
                        tl: {
                          hd: 1,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

var exampleEmptyBoard = {
  hd: {
    hd: 0,
    tl: {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: /* [] */0
            }
          }
        }
      }
    }
  },
  tl: {
    hd: {
      hd: 0,
      tl: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: /* [] */0
              }
            }
          }
        }
      }
    },
    tl: {
      hd: {
        hd: 0,
        tl: {
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          }
        }
      },
      tl: {
        hd: {
          hd: 2,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        },
        tl: {
          hd: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          },
          tl: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: {
                        hd: 0,
                        tl: {
                          hd: 0,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

CS17SetupGame$Game.checkExpect(accumulateValues(exampleEmptyBoard, /* P1 */0), 3, "no win for p1");

CS17SetupGame$Game.checkExpect(accumulateValues(exampleEmptyBoard, /* P2 */1), 0, "no win for p2");

CS17SetupGame$Game.checkExpect(accumulateValues(exampleBoard3, /* P2 */1), Pervasives.infinity, "diagonal win");

CS17SetupGame$Game.checkExpect(checkVerticalWin(transpose(exampleBoard)), false, "no horizontal win");

CS17SetupGame$Game.checkExpect(checkVerticalWin(transpose(exampleBoard2)), true, "horizontal win in bottom row");

CS17SetupGame$Game.checkExpect(checkVerticalWin(allDiagonals(exampleBoard)), false, "no diagonal");

CS17SetupGame$Game.checkExpect(checkVerticalWin(allDiagonals(exampleBoard3)), true, "2 diagonal");

CS17SetupGame$Game.checkExpect(checkVerticalWin(allDiagonals(exampleBoard4)), true, "2 diagonal");

CS17SetupGame$Game.checkExpect(checkVerticalWin(exampleBoard), false, "no four in a row");

CS17SetupGame$Game.checkExpect(checkVerticalWin(exampleBoard2), true, "four in a row in last");

CS17SetupGame$Game.checkExpect(checkFourInARow({
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 1,
              tl: {
                hd: 1,
                tl: {
                  hd: 1,
                  tl: {
                    hd: 1,
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }), true, "there is four in a row");

exports.stringOfList = stringOfList;
exports.stringOfStateHelper = stringOfStateHelper;
exports.transpose = transpose;
exports.vertFlip = vertFlip;
exports.getBoardWidth = getBoardWidth;
exports.addPaddingToRow = addPaddingToRow;
exports.addPaddingToBoard = addPaddingToBoard;
exports.checkFourInARow = checkFourInARow;
exports.checkVerticalWin = checkVerticalWin;
exports.checkHorizontalWin = checkHorizontalWin;
exports.allDiagonals = allDiagonals;
exports.checkDiagonalWin = checkDiagonalWin;
exports.addValueToThreeInARow = addValueToThreeInARow;
exports.addValueToTwoInARow = addValueToTwoInARow;
exports.countPlayerTilesInColumn = countPlayerTilesInColumn;
exports.addValueToGradient = addValueToGradient;
exports.accumulateValuesOneWay = accumulateValuesOneWay;
exports.checkWin = checkWin;
exports.accumulateValues = accumulateValues;
exports.exampleBoard = exampleBoard;
exports.exampleBoard2 = exampleBoard2;
exports.exampleBoard3 = exampleBoard3;
exports.exampleBoard4 = exampleBoard4;
exports.exampleEmptyBoard = exampleEmptyBoard;
/*  Not a pure module */
