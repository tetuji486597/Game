// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var AIPlayer$Game = require("./AIPlayer.bs.js");
var MyConnect4$Game = require("./MyConnect4.bs.js");
var HumanPlayer$Game = require("./HumanPlayer.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function Referee(MyGame, Player1, Player2) {
  var playGame = function (param) {
    try {
      var _s = Curry._1(MyGame.initialState, "7 6");
      while(true) {
        var s = _s;
        console.log(Curry._1(MyGame.stringOfState, s));
        var player = Curry._1(MyGame.gameStatus, s);
        if (typeof player === "number") {
          console.log("Draw...");
          return ;
        }
        if (player.TAG === /* Win */0) {
          console.log(Curry._1(MyGame.stringOfPlayer, player._0) + " wins!");
          return ;
        }
        var player$1 = player._0;
        console.log(Curry._1(MyGame.stringOfPlayer, player$1) + "'s turn.");
        var theMove = player$1 ? Curry._1(Player2.nextMove, s) : Curry._1(Player1.nextMove, s);
        console.log(Curry._1(MyGame.stringOfPlayer, player$1) + (" makes the move " + Curry._1(MyGame.stringOfMove, theMove)));
        _s = Curry._2(MyGame.nextState, s, theMove);
        continue ;
      };
    }
    catch (raw_message){
      var message = Caml_js_exceptions.internalToOCamlException(raw_message);
      if (message.RE_EXN_ID === "Failure") {
        console.log(message._1);
        return ;
      }
      throw message;
    }
  };
  return {
          CurrentGame: MyGame,
          playGame: playGame
        };
}

var $$let = HumanPlayer$Game.HumanPlayer({
      stringOfPlayer: MyConnect4$Game.Connect4.stringOfPlayer,
      stringOfState: MyConnect4$Game.Connect4.stringOfState,
      stringOfMove: MyConnect4$Game.Connect4.stringOfMove,
      initialState: MyConnect4$Game.Connect4.initialState,
      legalMoves: MyConnect4$Game.Connect4.legalMoves,
      gameStatus: MyConnect4$Game.Connect4.gameStatus,
      nextState: MyConnect4$Game.Connect4.nextState,
      moveOfString: MyConnect4$Game.Connect4.moveOfString,
      estimateValue: MyConnect4$Game.Connect4.estimateValue
    });

var partial_arg_nextMove = $$let.nextMove;

var partial_arg_stringOfPlayer = MyConnect4$Game.Connect4.stringOfPlayer;

var partial_arg_stringOfState = MyConnect4$Game.Connect4.stringOfState;

var partial_arg_stringOfMove = MyConnect4$Game.Connect4.stringOfMove;

var partial_arg_initialState = MyConnect4$Game.Connect4.initialState;

var partial_arg_legalMoves = MyConnect4$Game.Connect4.legalMoves;

var partial_arg_gameStatus = MyConnect4$Game.Connect4.gameStatus;

var partial_arg_nextState = MyConnect4$Game.Connect4.nextState;

var partial_arg_moveOfString = MyConnect4$Game.Connect4.moveOfString;

var partial_arg_estimateValue = MyConnect4$Game.Connect4.estimateValue;

var partial_arg = {
  stringOfPlayer: partial_arg_stringOfPlayer,
  stringOfState: partial_arg_stringOfState,
  stringOfMove: partial_arg_stringOfMove,
  initialState: partial_arg_initialState,
  legalMoves: partial_arg_legalMoves,
  gameStatus: partial_arg_gameStatus,
  nextState: partial_arg_nextState,
  moveOfString: partial_arg_moveOfString,
  estimateValue: partial_arg_estimateValue
};

var R1 = (function (param) {
      var playGame = function (param$1) {
        try {
          var _s = Curry._1(partial_arg_initialState, "7 6");
          while(true) {
            var s = _s;
            console.log(Curry._1(partial_arg_stringOfState, s));
            var player = Curry._1(partial_arg_gameStatus, s);
            if (typeof player === "number") {
              console.log("Draw...");
              return ;
            }
            if (player.TAG === /* Win */0) {
              console.log(Curry._1(partial_arg_stringOfPlayer, player._0) + " wins!");
              return ;
            }
            var player$1 = player._0;
            console.log(Curry._1(partial_arg_stringOfPlayer, player$1) + "'s turn.");
            var theMove = player$1 ? Curry._1(param.nextMove, s) : Curry._1(partial_arg_nextMove, s);
            console.log(Curry._1(partial_arg_stringOfPlayer, player$1) + (" makes the move " + Curry._1(partial_arg_stringOfMove, theMove)));
            _s = Curry._2(partial_arg_nextState, s, theMove);
            continue ;
          };
        }
        catch (raw_message){
          var message = Caml_js_exceptions.internalToOCamlException(raw_message);
          if (message.RE_EXN_ID === "Failure") {
            console.log(message._1);
            return ;
          }
          throw message;
        }
      };
      return {
              CurrentGame: partial_arg,
              playGame: playGame
            };
    })(AIPlayer$Game.AIPlayer({
          stringOfPlayer: MyConnect4$Game.Connect4.stringOfPlayer,
          stringOfState: MyConnect4$Game.Connect4.stringOfState,
          stringOfMove: MyConnect4$Game.Connect4.stringOfMove,
          initialState: MyConnect4$Game.Connect4.initialState,
          legalMoves: MyConnect4$Game.Connect4.legalMoves,
          gameStatus: MyConnect4$Game.Connect4.gameStatus,
          nextState: MyConnect4$Game.Connect4.nextState,
          moveOfString: MyConnect4$Game.Connect4.moveOfString,
          estimateValue: MyConnect4$Game.Connect4.estimateValue
        }));

Curry._1(R1.playGame, undefined);

exports.Referee = Referee;
exports.R1 = R1;
/* R1 Not a pure module */
